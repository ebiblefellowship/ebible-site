#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. "/about/" for the file
#   "content/about.html"). To select all children, grandchildren, … of an
#   item, use the pattern "/about/*/"; "/about/*" will also select the parent,
#   because "*" matches zero or more characters.
#
# * Examples:
#   - Nanoc site: http://projects.stoneship.org/hg/sites-nanoc/file/36a3f20ff06b/Rules
#   - HEARALD site: http://github.com/h3rald/h3rald/blob/master/Rules
#
# NOTE: Borrowed much from http://projects.stoneship.org/hg/sites-nanoc/raw-file/54ec6c7b39a6/Rules
#

# Use the compass sass framework for processing scss files
require 'compass'
Compass.add_project_configuration('config.rb')

# List of extensions that are mapped to a subdirectory with index.html
mapped_extensions = %w[ html md haml ]

# The preprocess block is used to generate dynamic pages, like archives,
# tag pages and meta-pages that are simple to generate, like the sitemap
# or feed.
#
# Simply create a new item, add it to the @items stack and you're set.
# Note: the preprocess block has no item context, so you cannot just call
# xml_sitemap or atom_feed directly. Instead, embed it in a string and filter
# that with erb.
preprocess do
  
  # Returns ItemGroups instance.  Define method in the Nanoc3::Site instance.
  def @site.item_groups
    @item_groups = ItemGroups.new if @item_groups.nil?
    @item_groups
  end

  # Add sitemap item
  def create_sitemap
    @items << Nanoc3::Item.new(
      "<%= xml_sitemap :items => @items.reject { |i| i[:is_hidden] || i.binary? || %w[css htc js].include?(i[:extension])} %>",
      { :extension => 'xml', :is_hidden => true },
      '/sitemap/'
    )
  end

  # Add Atom feed item
  def create_atom_feed
    @items << Nanoc3::Item.new(
      "<%= atom_feed :limit => 25, :title => 'EBible Fellowship News', " +
        ":author_name => 'Admin', :author_uri => 'http://www.ebiblefellowship.com' %>",
      { :extension => 'xml', :is_hidden => true },
      '/atom/'
    )
  end

  # Initialize default values for various attributes
  def initialize_item_attributes
    # select all items ...
    @items.each do |i|
      next if i[:is_hidden] == true
      next unless i.identifier =~ %r{(\d\d\d\d\.\d\d\.\d\d)}
      # Set the :created_at attribute for date-based content if not set
      i[:created_at] = $1.tr('.','-') if i[:created_at].nil?
      # TODO: test for :audio attribute first before doing logic below
      # Find an associated /audio item and save its attributes to the item
      audio_item = @items.find { |a| a.identifier == '/audio' + i.identifier }
      i[:audio] = audio_item.attributes unless audio_item.nil?
      # Set category unless already defined
      # /studies/bc2/2010.11.14.../ => studies.bc2
      i[:category] = i.identifier.split('/')[1..-2].join('.') unless i[:category]
      # If part of a series, append item to an Array stored in a Hash by series name
      @site.item_groups[i[:series]] = i if i[:series]
      # Extract slug for news items so routing can be shared
      if i.identifier =~ %r{^/news/.+} and i[:slug].nil?
        # Extract basename from identifier and strip any date from the front
        i[:slug] = i.identifier.split('/').last.sub(/^\d\d\d\d\.\d\d\.\d\d[_-]/,'')
      end
      #puts '==========='
      #puts i.identifier
      #puts YAML.dump i.attributes
    end
    # Sort the items in each series by ascending created_at date
    # Each item group ...
    @site.item_groups.names.each { |name| @site.item_groups.sort_by_created_at(name) }
    puts @site.item_groups.to_s
  end

  # Run methods
  create_sitemap
  create_atom_feed
  initialize_item_attributes

end

### Compilation ##############################################################

# Sitemap and htaccess do get filtered with erb, but get no layout.
compile %r{^/(atom|sitemap|htaccess|panels|rewrites|robots)/$} do
  filter :erb
end

compile '/static/*/' do
end

compile %r{^/error-\d\d\d/$} do
  filter :erb
  layout '/default/'
end

compile '/css/*' do
  filter :erb if item[:extension] == 'css'
  #filter :relativize_paths, :type => :css
  #filter :rainpress
end

compile '/javascript/map' do
  filter :erb
end

compile '/javascript/*' do
end

compile '/stylesheets/_*/' do
  # Don't compile partials
end

compile '/stylesheets/*/' do
  # compile scss or sass unless it's a .css file
  filter :sass, Compass.sass_engine_options unless
         item[:extension] == 'css'
end

# compile audio with no layout
compile '/audio/*' do
end

# compile/copy the rest of the assets
compile '/assets/*/' do
end

# Home page uses a different layout
compile '/' do
  filter :erb
  layout '/default/'
  #filter :relativize_paths, :type => :html
  #filter :rubypants
end if false

# Free request pages use a different layout
compile '/free*/*' do
  filter :erb
  layout '/default/'
  #filter :relativize_paths, :type => :html
end

compile '*' do
  # Flag to perform filtering if extension is html or md, 
  perform_filtering = mapped_extensions.include?(item[:extension])
  filter :erb if perform_filtering

  case item[:extension]
  when 'md' then
    filter :kramdown, :auto_ids => false
  when 'haml' then
    filter :haml
  end

  if perform_filtering
    layout '/default/'
    ##filter :relativize_paths, :type => :html unless item[:is_partial] || item[:kind] == 'article'
  end
end

### Routing ##################################################################

route '/sitemap/' do
  '/sitemap.xml'
  #nil
end

route '/static/*/' do
  #puts "id: #{item.identifier}[7..-2]: #{item.identifier[7..-2]} ext: #{item[:extension]}"
  # /static/foo.html/ → /foo.html
  identifier = item.identifier[7..-2]
  # for any identifier that's two letters, assume it's a country directory and 
  # add /index.html instead of just .html.
  identifier + (identifier =~ %r{/[a-z][a-z]$} ? '/index.html' : '.' + item[:extension])
end

route %r{^/error-\d\d\d/$} do
  item.identifier.chop + '.php'
end 

route %r{^/rewrites\.conf} do
  '/rewrites.conf'
end

route '/stylesheets/_*/' do
  nil  # Don't output partials
end

route '/stylesheets/*/' do
  item.identifier.chop + '.css'
  # path with version for cache busting
  #'/assets/style/style' + '-v' + rep.item[:version].to_s + '.css'
  nil  # not using scss/compass
end

route '/javascript/*' do
  item.identifier.chop + '.' + item[:extension]
end

#  /audio folder is just an extract from mp3 files and not used to create pages
route '/audio/*' do
  nil
end

# route rest of assets preserving the current file extersion
route '/assets/*/' do
  item.identifier.chop + '.' + item[:extension]
end

route '*' do
  # does this work?
  if item.binary? or !mapped_extensions.include?(item[:extension])
    item.identifier.chop + '.' + item[:extension]
  elsif item[:is_partial] # || item[:kind] == 'article' # why this check?
    nil  # Don’t output partial items (e.g. sub-stylesheets)
  elsif item.identifier =~ %r{(\d\d\d\d\.\d\d\.\d\d)} and item[:slug]
    "/archives/#{$1.tr('.','/')}/#{item[:slug]}/index.html"
  else
    # Place each file in its own directory
    rep.item.identifier + 'index.html'
  end
end

### Layouting ################################################################

layout '/default/', :erb  #, :format => :html5

layout '*', :erb

