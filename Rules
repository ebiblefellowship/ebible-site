#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. "/about/" for the file
#   "content/about.html"). To select all children, grandchildren, … of an
#   item, use the pattern "/about/*/"; "/about/*" will also select the parent,
#   because "*" matches zero or more characters.
#
# * Examples:
#   - Nanoc site: http://projects.stoneship.org/hg/sites-nanoc/file/36a3f20ff06b/Rules
#   - HEARALD site: http://github.com/h3rald/h3rald/blob/master/Rules
#
# NOTE: Borrowed much from http://projects.stoneship.org/hg/sites-nanoc/raw-file/54ec6c7b39a6/Rules
#

# Use the compass sass framework for processing scss files
require 'compass'
Compass.add_project_configuration('config.rb')

# The preprocess block is used to generate dynamic pages, like archives,
# tag pages and meta-pages that are simple to generate, like the sitemap
# or feed.
#
# Simply create a new item, add it to the @items stack and you're set.
# Note: the preprocess block has no item context, so you cannot just call
# xml_sitemap or atom_feed directly. Instead, embed it in a string and filter
# that with erb.
preprocess do
  # Define method
  def create_sitemap
    @items << Nanoc3::Item.new(
      "<%= xml_sitemap %>",
      { :extension => 'xml' },
      '/sitemap/'
    )
  end

  # Run method
  create_sitemap
end

### Compilation ##############################################################

# Sitemap and htaccess do get filtered with erb, but get no layout.
compile %r{^/(sitemap|htaccess)/$} do
  filter :erb
  filter :clean_sitemap if item.identifier == '/sitemap/'
end

compile '/static/*/' do
end

compile '/stylesheets/_*/' do
  # Don't compile partials
end

compile '/stylesheets/*/' do
  # compile scss or sass unless it's a .css file
  filter :sass, Compass.sass_engine_options unless
         item[:extension] == 'css'
  #filter :relativize_paths, :type => :css
  #filter :rainpress
end

# compile/copy the rest of the assets
#compile '/assets/*/' do
#end

# Home page uses a different layout
compile '/' do
  filter :erb
  layout '/home/'
  #filter :relativize_paths, :type => :html
  #filter :rubypants
end

# Free request pages use a different layout
compile '/free*/*' do
  filter :erb
  layout '/default/'
  filter :relativize_paths, :type => :html
end

compile '*' do
  filter :erb  #if item[:is_dynamic]

  # TODO: we don't use any of these formats so strip out what we don't use
  case item[:extension]
  when 'textile' then
    filter :redcloth
  when 'haml' then
    filter :haml
  when 'bbcode' then
    filter :bbcode
  end

  case item[:markdown]
  when 'advanced'
    filter :kramdown, :auto_ids => false
  when 'basic'
    filter :rdiscount
  end

  ##snapshot :before_sections
  ##filter :add_sections
  layout '/default/'
  filter :relativize_paths, :type => :html unless item[:is_partial] || item[:kind] == 'article'
end

### Routing ##################################################################

route '/sitemap/' do
  '/sitemap.xml'
end

route '/static/*/' do
  puts "id: #{item.identifier}[7..-2]: #{item.identifier[7..-2]} ext: #{item[:extension]}"
  # /static/foo.html/ → /foo.html
  item.identifier[7..-2] #+ '.' + item.identifier[:extension]
end

route '/stylesheets/_*/' do
  nil  # Don't output partials
end

route '/stylesheets/*/' do
  item.identifier.chop + '.css'
  # path with version
  #'/assets/style/style' + '-v' + rep.item[:version].to_s + '.css'
end

# route rest of assets preserving the current file extersion
#route '/assets/*/' do
#  item.identifier.chop + '.' + item[:extension]
#end

# traslate input names to output
route '/messages/\d\d\d\d/*/' do
  require 'date'
  # Get filename part from identifier
  file = item.identifier.chop.split('/')[-1]
  file_title = file.split('_-_')[-1]
  slug = item[:slug]
  if slug.nil? 
    slug = item[:title] || ''
    slug = slug.gsub(' ','-').downcase
  end
  # clean slug of punctuation characters
  slug.gsub!(/[,:?'"]/,'')
  # get the date from the attribute or file identifier
  date = '1980/1/1'  # init
  date = item[:date]
  # if no date attribute, parse from item identifier
  if date.nil? and item.identifier =~ /(\d\d\d\d).(\d\d).(\d\d)/
    date = Date.new($1, $2, $3)
  end
  "/messages/#{date.strftime('%Y/%m/%d')}/#{slug}/index.html"
end

route '*' do
  # does this work?
  if item.binary?
    item.identifier.chop + '.' + item[:extension]
  elsif item[:is_partial] || item[:kind] == 'article'
    nil  # Don’t output partial items (e.g. sub-stylesheets)
  else
    # Place each file in its own directory
    rep.item.identifier + 'index.html'
  end
end

### Layouting ################################################################

layout '/default/', :erb  #, :format => :html5

layout '*', :erb

